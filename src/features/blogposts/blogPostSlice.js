import { createSlice, nanoid } from "@reduxjs/toolkit";
import { sub } from "date-fns";
//think of the slice first any time new data is added
const initialState = [
  //initial content
  {
    id: "0",
    title: "Welcome",
    content: "A relocation blog",
    date: sub(new Date(), { minutes: 10 }).toISOString(),
    reactions: {
      like: 0,
      wow: 0,
      heart: 0,
      rocket: 0,
      coffee: 0,
      dislike: 0,
    },
  },
  {
    id: "1",
    title: "Liverpool",
    content: "An undiscovered gem?",
    date: sub(new Date(), { minutes: 5 }).toISOString(),
    reactions: {
      like: 0,
      wow: 0,
      heart: 0,
      rocket: 0,
      coffee: 0,
      dislike: 0,
    },
  },
];

const blogPostsSlice = createSlice({
  name: "blogPosts",
  initialState,
  reducers: {
    //actions
    //add a blog post, payload will be data from form
    //.push would mutate state by mutating array but react toolkit prevents this using immer - this creates a new state underneath - ONLY WORKS IN CREATE SLICE
    blogPostAdded: {
      //prepare callback to format data and generate unique ids and return object with payload

      reducer(state, action) {
        state.push(action.payload);
      },
      //this is what we would get from the add blog post component

      prepare(title, content, userId) {
        return {
          payload: {
            id: nanoid(),
            title,
            content,
            date: new Date().toISOString(),
            userId,
            reactions: {
              like: 0,
              wow: 0,
              heart: 0,
              rocket: 0,
              coffee: 0,
              dislike: 0,
            },
          },
        };
      },
    },
    reactionAdded(state, action) {
      const { blogPostId, reaction } = action.payload;
      const existingPost = state.find((blogPost) => blogPost.id === blogPostId);
      if (existingPost) {
        //inside create slice in redux protected from mutating state by immer js
        existingPost.reactions[reaction]++;
      }
    },
  },
});
export const selectAllBlogPosts = (state) => state.blogPosts;
//an action creator function with the same name will be generated by create slice
export const { blogPostAdded, reactionAdded } = blogPostsSlice.actions;
export default blogPostsSlice.reducer;
